{"version":3,"sources":["components/ListItem.jsx","components/Comment.jsx","components/TabPane.jsx","components/RedmineList.jsx","App.jsx","index.js"],"names":["Project","props","project","id","name","identifier","className","href","aria-controls","role","data-toggle","CommentsList","comment","title","TabPane","state","comments","handleSubmit","bind","handleChangeTitle","handleChangeComment","commentsAtLS","localStorage","getItem","this","setState","prevState","JSON","parse","event","target","value","preventDefault","addComment","newComment","Date","getTime","pushToLocalStorage","prevComments","setItem","stringify","description","status","custom_fields","created_on","updated_on","aria-labelledby","map","key","onSubmit","type","placeholder","onChange","required","length","Component","RedmineList","projects","App","data","fetch","urlData","credentials","then","res","json","response","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b581f83.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Project(props) {\r\n  const { id, name, identifier } = props.project;\r\n  return (\r\n    <a\r\n      className=\"list-group-item list-group-item-action\"\r\n      id={id}\r\n      href={`#${identifier}`}\r\n      aria-controls={identifier}\r\n      role=\"tab\"\r\n      data-toggle=\"list\"\r\n    >\r\n      {name}\r\n    </a>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function CommentsList(props) {\r\n  const { title, comment } = props.comment;\r\n  return (\r\n    <li className=\"media list-group-item\">\r\n      <div className=\"media-body\">\r\n        <h5 className=\"mt-0 mb-1\">{title}</h5>\r\n        {comment}\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Comment from \"./Comment.jsx\";\r\n\r\nexport default class TabPane extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.identifier = this.props.project.identifier;\r\n\r\n    this.state = {\r\n      title: \"\",\r\n      comment: \"\",\r\n      comments: []\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChangeTitle = this.handleChangeTitle.bind(this);\r\n    this.handleChangeComment = this.handleChangeComment.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const commentsAtLS = localStorage.getItem(this.identifier);\r\n    if (commentsAtLS) {\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        comments: JSON.parse(commentsAtLS)\r\n      }));\r\n    }\r\n  }\r\n\r\n  handleChangeTitle(event) {\r\n    const title = event.target.value;\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        title: title\r\n      };\r\n    });\r\n  }\r\n\r\n  handleChangeComment(event) {\r\n    const comment = event.target.value;\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        comment: comment\r\n      };\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.addComment();\r\n  }\r\n\r\n  addComment() {\r\n    const idcomment = new Date().getTime();\r\n    const newComment = {\r\n      id: idcomment,\r\n      title: this.state.title,\r\n      comment: this.state.comment\r\n    };\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        title: \"\",\r\n        comment: \"\",\r\n        comments: [...prevState.comments, newComment]\r\n      };\r\n    });\r\n\r\n    this.pushToLocalStorage(this.state.comments, newComment);\r\n  }\r\n\r\n  pushToLocalStorage(prevComments, newComment) {\r\n    localStorage.setItem(\r\n      this.identifier,\r\n      JSON.stringify([...prevComments, newComment])\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      name,\r\n      identifier,\r\n      description,\r\n      status,\r\n      custom_fields,\r\n      created_on,\r\n      updated_on\r\n    } = this.props.project;\r\n\r\n    return (\r\n      <div\r\n        className=\"tab-pane fade show\"\r\n        id={identifier}\r\n        aria-labelledby={identifier}\r\n        role=\"tabpanel\"\r\n      >\r\n        <h2>{name}</h2>\r\n        <h4>{description}</h4>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">ID: {id}</li>\r\n          <li className=\"list-group-item\">Status: {status}</li>\r\n          <li className=\"list-group-item\">Created on: {created_on}</li>\r\n          <li className=\"list-group-item\">Updated on: {updated_on}</li>\r\n          <li className=\"list-group-item\">Identifier: {identifier}</li>\r\n          <li className=\"list-group-item\">\r\n            Custom fields:\r\n            {custom_fields.map(({ id, name, value }) => (\r\n              <ul className=\"list-unstyled\" key={id}>\r\n                <li className=\"font-weight-bold\">{name}</li>\r\n                <li>ID: {id}</li>\r\n                {value && <li>Value: {value}</li>}\r\n              </ul>\r\n            ))}\r\n          </li>\r\n        </ul>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            name=\"title\"\r\n            type=\"text\"\r\n            placeholder=\"Title:\"\r\n            className=\"w-100 p-3\"\r\n            onChange={this.handleChangeTitle}\r\n            value={this.state.title}\r\n            required\r\n          />\r\n          <textarea\r\n            name=\"comment\"\r\n            type=\"text\"\r\n            placeholder=\"Your comment:\"\r\n            className=\"w-100 p-3\"\r\n            onChange={this.handleChangeComment}\r\n            value={this.state.comment}\r\n            required\r\n          />\r\n          <button className=\"btn btn-primary w-100 p-3\" type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n        {this.state.comments.length !== 0 && (\r\n          <ul className=\"d-flex flex-column-reverse list-group\">\r\n            {this.state.comments.map(comment => (\r\n              <Comment key={comment.id} comment={comment} />\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport ListItem from \"./ListItem.jsx\";\r\nimport TabPane from \"./TabPane.jsx\";\r\n\r\nexport default function RedmineList(props) {\r\n  const { projects } = props.projects;\r\n  return (\r\n    <>\r\n      <header className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4\">Redmine Application</h1>\r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"row\">\r\n          <div className=\"col-4\">\r\n            <div className=\"list-group\" id=\"list-tab\" role=\"tablist\">\r\n              {projects.map(project => (\r\n                <ListItem key={project.id} project={project} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-8\">\r\n            <div className=\"tab-content\" id=\"nav-tabContent\">\r\n              {projects.map(project => (\r\n                <TabPane key={project.id} project={project} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\n\nimport RedmineList from \"./components/RedmineList.jsx\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    const promise = fetch(this.props.urlData, {\n      credentials: \"include\"\n    });\n\n    promise\n      .then(res => res.json())\n      .then(response =>\n        this.setState(() => ({\n          data: response\n        }))\n      );\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.data.length !== 0 && (\n          <RedmineList projects={this.state.data} />\n        )}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\n\nconst urlData = \"https://redmine.ekreative.com/projects.json\";\n\nReactDOM.render(<App urlData={urlData} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}